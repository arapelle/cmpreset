#!/usr/bin/env python3

import argparse
import sys
import os
from pathlib import Path
import shutil
import git

CMPRESET_VERSION:str = "0.1"

# argparser.add_argument('--cmake', metavar='cmake-path', type=str, default="cmake", help='Path or alias to CMake')

class CMpreset:
    def __init__(self):
        self.cmpresets = Path(os.path.realpath(__file__)).parent / "cmpresets"
        # print(self.cmpresets)
        pass

    def configure(self, args):
        argparser = argparse.ArgumentParser(sys.argv[0] + ' configure')
        arggroup = argparser.add_mutually_exclusive_group(required=True)
        arggroup.add_argument('--dir', type=str, help='Directory to link to')
        arggroup.add_argument('--git', type=str, help='Git repository URL')
        pargs = argparser.parse_args(args)
        if pargs.dir is not None:
            if not pargs.dir.is_dir():
                print(f"Directory '{pargs.dir}' does not exist (or is not a directory).")
                return
            os.symlink(pargs.dir, self.cmpresets)
        else:
            print(f"configure git: {pargs.git}")
            git.Repo.clone_from(pargs.git, self.cmpresets)
            pass            
        pass

    def link(self, args):
        argparser = argparse.ArgumentParser(sys.argv[0] + ' get')
        argparser.add_argument('project_name', nargs='?', default=Path(os.getcwd()).stem, type=str, help='Project name')
        argparser.add_argument('-c', '--create', action='store_true', help='Create user presets in repository before linking.')
        pargs = argparser.parse_args(args)
        user_presets_file = self.cmpresets / pargs.project_name / "CMakeUserPresets.json"

        if pargs.create:
            if not user_presets_file.exists():
                # TODO create file
                pass
            else:
                print(f"File '{user_presets_file}' already exists.")
        if user_presets_file.exists():
            print(f"Link '{user_presets_file}'")
            os.symlink(user_presets_file, "CMakeUserPresets.json")
        else:
            print(f"File '{user_presets_file}' does not exist.")
        pass

    def copy(self, args):
        argparser = argparse.ArgumentParser(sys.argv[0] + ' get')
        argparser.add_argument('project_name', nargs='?', default=Path(os.getcwd()).stem, type=str, help='Project name')
        pargs = argparser.parse_args(args)
        user_presets_file = self.cmpresets / pargs.project_name / "CMakeUserPresets.json"
        if user_presets_file.exists():
            print(f"Copy '{user_presets_file}'")
            shutil.copy(user_presets_file, "CMakeUserPresets.json")
        else:
            print(f"File '{user_presets_file}' does not exist.")
        pass

    def save(self, args):
        argparser = argparse.ArgumentParser(sys.argv[0] + ' get')
        argparser.add_argument('project_name', nargs='?', default=Path(os.getcwd()).stem, type=str, help='Project name')
        pargs = argparser.parse_args(args)
        user_presets_dir = self.cmpresets / pargs.project_name
        user_presets_file = user_presets_dir / "CMakeUserPresets.json"
        if Path("CMakeUserPresets.json").exists():
            print(f"Copy '{user_presets_file}'")
            os.makedirs(user_presets_dir)
            shutil.copy("CMakeUserPresets.json", user_presets_file)
        else:
            print(f"File 'CMakeUserPresets.json' does not exist.")
        pass

    def push(self, args):
        # TODO
        if (self.cmpresets / ".git").is_dir():
            print('git push')
            pass
        pass

    def pull(self, args):
        # TODO
        if (self.cmpresets / ".git").is_dir():
            print('git pull')
            pass
        pass

def main():
    argparser = argparse.ArgumentParser()
    argparser.add_argument('-v', '--version', action='version', version='%(prog)s version {}'.format(CMPRESET_VERSION))
    cmd_choices = ["link", "copy", "save", "configure", "push", "pull"]
    argparser.add_argument('cmd', type=str, help='Command ({})'.format('|'.join(cmd_choices)), choices=cmd_choices)
    pargs, punknown = argparser.parse_known_args()
    cmpreset = CMpreset()
    getattr(cmpreset, pargs.cmd)(punknown)

if __name__ == "__main__":
    main()
    print("EXIT SUCCESS")
